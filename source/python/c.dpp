module python.c;

public import python.statics;


@trusted @nogc nothrow:

#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <structmember.h> // PyMemberDef
#include <datetime.h>

// FIXME: The two macros below aren't showing up. Default isn't
// working because it depends on the definition of
// `Py_TPFLAGS_HAVE_STACKLESS_EXTENSION`, which is defined below it in
// the resulting c.d file. The fact that there are static ifs
// everywhere probably makes the order of definitions matter.
enum TypeFlags {
    BaseType = Py_TPFLAGS_BASETYPE,
    Default = Py_TPFLAGS_DEFAULT,
}

// Demacroify
// Used to declare custom Python objects, needs to be mixed in at the
// top of the struct.
mixin template PyObjectHead() {
    PyObject_HEAD;
}

// Hand-translate PyObject_HEAD_INIT since the C code in the macro isn't
// valid D code to initialise a struct with.
auto pyObjectHeadInit(T)(T type) {
    return PyObject(typeof(PyObject.tupleof[0])(1), type);
}


// Hand-translate PyModuleDef_HEAD_INIT since the C code in the macro isn't
// valid D code to initialise a struct with.
auto pyModuleDefHeadInit() {
    return PyModuleDef_Base(
        pyObjectHeadInit(null),
        null, /* m_init */
        0,    /* m_index */
        null, /* m_copy */
    );
}

auto pyObjectNew(T)(PyTypeObject* typeobj) {
    //return cast(T*) _PyObject_New(typeobj);
    return PyObject_New(T, typeobj);
}

// Demacroify
// FIXME:
// This fails because `PyDateTime_IMPORT` depends on
// `PyDateTime_CAPSULE_NAME`, which gets defined below it in a static
// if.
// If moved manually, it then fails because `PyDateTime_Import` expands
// to `PyDateTimeAPI = cast(T*) PyCapsure_Import(...);` and the macro translation
// ends up being:
// `enum PyDateTime_IMPORT = PyDateTimeAPI = ...;`. This doesn't compile because
// `PyDateTimeAPI` isn't known at compile time.
void pyDateTimeImport() @nogc nothrow {
    PyDateTime_IMPORT;
}

// static inline function in the header
static int PyType_HasFeature(PyTypeObject *type, ulong feature) @safe @nogc pure nothrow {
    ulong flags;
    flags = type.tp_flags;
    return (flags & feature) != 0;
}
